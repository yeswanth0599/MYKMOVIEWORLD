package com.mykmovies.android.mykmovieworld;

import android.app.ProgressDialog;
import android.database.Cursor;
import android.os.Bundle;
import android.support.annotation.Nullable;
import android.support.v4.app.Fragment;
import android.support.v4.app.LoaderManager;
import android.support.v4.content.AsyncTaskLoader;
import android.support.v4.content.Loader;
import android.support.v7.widget.GridLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;

import com.mykmovies.android.mykmovieworld.data.MovieContract;

import java.util.ArrayList;
import java.util.List;


public class FavoriteMovies extends Fragment implements LoaderManager.LoaderCallbacks<Cursor>{

    /**
     * RecyclerView , custom List (LIST<MovieList>) variables created
     */
    private RecyclerView movieRecycleViewMain;
    private RecyclerView.Adapter movieAdapterMain;
    private List<MovieList> movieListsMain;
    private ProgressDialog progressDialog;
    private static int ADDRESSLOADER_ID=99;

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        // Inflate the layout for this fragment
        return inflater.inflate(R.layout.fragment_favorite_movies, container, false);
    }
    public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);
        /**
         * Accessing Movie DB Key from the Gradle File
         * combined MoviedDBKey with base url will get popular movie information
         */
        movieRecycleViewMain=(RecyclerView)getActivity().findViewById(R.id.movie_recyclerview);
        movieRecycleViewMain.setHasFixedSize(true);
        movieRecycleViewMain.setLayoutManager(new GridLayoutManager(getContext(),2));
        movieListsMain=new ArrayList<>();
        progressDialog=new ProgressDialog(getContext());
        progressDialog.setMessage("Loading Data...");
        progressDialog.show();
        getLoaderManager().initLoader(ADDRESSLOADER_ID, null, this);
    }
    public Loader<Cursor> onCreateLoader(int id, final Bundle loaderArgs) {

        return new AsyncTaskLoader<Cursor>(getContext()) {

            // Initialize a Cursor, this will hold all the task data
            Cursor mTaskData = null;

            // onStartLoading() is called when a loader first starts loading data
            @Override
            protected void onStartLoading() {
                if (mTaskData != null) {
                    // Delivers any previously loaded data immediately
                    deliverResult(mTaskData);
                } else {
                    // Force a new load
                    forceLoad();
                }
            }
            // loadInBackground() performs asynchronous loading of data
            @Override
            public Cursor loadInBackground() {
                // Will implement to load data

                // Query and load all task data in the background; sort by priority
                // [Hint] use a try/catch block to catch any errors in loading data

                try {
                    return getActivity().getContentResolver().query(MovieContract.MovieEntryInfo.CONTENT_URI,
                            null,
                            null,
                            null,
                            null);

                } catch (Exception e) {
                    Log.d("onLoadFailed","Error Occured while loading the data, Database Exception=" + e);
                    e.printStackTrace();
                    return null;
                }
            }
            // onStartLoading() is called when a loader first starts loading data
            public void deliverResult(Cursor data) {
                mTaskData = data;
                super.deliverResult(data);
            }// deliverResult sends the result of the load, a Cursor, to the registered listener
        };

    }


    /**
     * Called when a previously created loader has finished its load.
     *
     * @param loader The Loader that has finished.
     * @param cursorData The data generated by the Loader.
     */
    @Override
    public void onLoadFinished(Loader<Cursor> loader, Cursor cursorData) {
        // Update the data that the adapter uses to create ViewHolders
        progressDialog.dismiss();

        if (cursorData.moveToFirst()){
            while(!cursorData.isAfterLast()){
                int movieIdIndex =cursorData.getColumnIndex(MovieContract.MovieEntryInfo.COLUMN_MOVIE_ID);
                int movieTitleIndex =cursorData.getColumnIndex(MovieContract.MovieEntryInfo.COLUMN_MOVIE_TITLE);
                int moviePosterURLIndex =cursorData.getColumnIndex(MovieContract.MovieEntryInfo.COLUMN_MOVIE_POSTER_URL);
                int movieSynopsisIndex =cursorData.getColumnIndex(MovieContract.MovieEntryInfo.COLUMN_MOVIE_SYNOPSIS);
                int movieRatingIndex =cursorData.getColumnIndex(MovieContract.MovieEntryInfo.COLUMN_MOVIE_RATING);
                int movieReleaseDateIndex =cursorData.getColumnIndex(MovieContract.MovieEntryInfo.COLUMN_MOVIE_RELEASE_DATE);
                int movieOriginalTitleIndex =cursorData.getColumnIndex(MovieContract.MovieEntryInfo.COLUMN_MOVIE_ORIGINAL_TITLE);
                int movieTrailerIndex =cursorData.getColumnIndex(MovieContract.MovieEntryInfo.COLUMN_MOVIE_TRAILER);
                String movieID = String.valueOf(cursorData.getInt(movieIdIndex));
                String movieTitle = cursorData.getString(movieTitleIndex);
                String moviePosterURL = cursorData.getString(moviePosterURLIndex);
                String movieSynopsis = cursorData.getString(movieSynopsisIndex);
                String movieRating=String.valueOf(cursorData.getFloat(movieRatingIndex));
                String movieReleaseDate = cursorData.getString(movieReleaseDateIndex);
                String movieOriginalTitle = cursorData.getString(movieOriginalTitleIndex);
                String movieTrailer=cursorData.getString(movieTrailerIndex);
                // do what ever you want here
                MovieList movieList=new MovieList(movieID,movieTitle,moviePosterURL,movieSynopsis,movieRating,movieReleaseDate,movieOriginalTitle,movieTrailer);
                movieListsMain.add(movieList);
                movieAdapterMain=new MovieAdapter(movieListsMain,getContext());
                movieRecycleViewMain.setAdapter(movieAdapterMain);
                cursorData.moveToNext();
            }

        }
        cursorData.close();

    }


    /**
     * Called when a previously created loader is being reset, and thus
     * making its data unavailable.
     * onLoaderReset removes any references this activity had to the loader's data.
     *
     * @param loader The Loader that is being reset.
     */
    @Override
    public void onLoaderReset(Loader<Cursor> loader) {

    }

}


